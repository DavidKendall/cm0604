<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Exercises 2</title> 
  </header> 
  <body> 
<section id="ex02">
<title>Exercises 2</title>

<p>
<strong>Objectives</strong>
</p>
<ul>
<li>Make further progress with SPIN and PROMELA in modelling and analysing
some simple concurrent systems</li>
<li>Use PROMELA and SPIN to model and analyse simple mutex protocols
  with respect to <em>safety</em> properties</li>
</ul> 

<p>
<strong>Checking Safety Properties of Mutex Using SPIN</strong>
</p>

<p>
Use Promela/Spin to model and verify the algorithms below for
maintaining mutually exclusive access to a critical region in a 2
process system.
</p>

<p>
You should check for the following properties:
</p>

<ol>
  <li> Mutual exclusion is preserved. i.e. at most one process is in 
     its critical section at any one time.</li>
  <li> Deadlock is avoided.</li>
</ol>

<p>
You can assume that no process will remain in its critical section forever.
You can not assume that a process will ever try to enter its critical 
section.
</p>

<p>
Verification of these properties can be carried out with Spin by using
the following techniques:
</p>

<ol>
  <li> Assertions -- for checking for preservation of mutual exclusion.
     You will need to think of an assertion (or assertions) which you can
     include in your program, whose truth guarantees that mutual exclusion
     is preserved. Use Spin to check that your assertions are not violated.
  </li>


  <li> Invalid end-states -- by default Spin will check for invalid end states
     (i.e. states from which it is not possible to make further progress,
      which either 
        a) do not occur as the result of termination, or
        b) are not labelled as valid end states (by using an "end:" label
           in Promela)
     ). 
     The existence of an invalid end-state indicates the possibility of
     deadlock.
  </li>
</ol>

<p>
You should refer to the <a href="ext:ra/CM604/spinbasic">Basic SPIN
Manual</a>, if necessary, for an introduction to the use of assertions
and end-labels.
</p>

<p>
The algorithms are described below using pseudo-code.
</p>

<p>
<strong>Algorithm 1</strong>
</p>

<p>
Uses a single shared variable called "entry" which can take one of two
values, either "allowed" or "forbidden"
</p>

<p>
<strong>Process 1 and 2</strong><br/>
</p>

<source>
<code>
  entry = allowed;
  repeat
    while entry = forbidden do 
      /* nothing */
    end while;
    entry = forbidden;
    /* do critical section */
    entry = allowed;
    /* do processing outside critical section */
  forever
</code>
</source>

<p>
<strong>Algorithm 2</strong>
</p>


<p>
Uses 2 shared variables "need1" which is set by process 1 when it needs to
enter its critical section and "need2" which is set similarly by process 2.
</p>

<p>
<strong>Process 1</strong><br/>
</p>

<source>
<code>  
  need1 = false;
  repeat
    need1 = true;
    while need2 do
      /* nothing */
    end while;
    /* do critical section */
    need1 = 0;
    /* do processing outside critical section */
  forever
</code>
</source>

<p>
<strong>Process 2</strong>
</p>

<source>
<code>
  need2 = false;
  repeat
    need2 = true;
    while need1 do
      /* nothing */
    end while;
    /* do critical section */
    need2 = false;
    /* do processing outside critical section */
  forever
</code>
</source>
</section>
</body>
</document>